第6章のリスト
===============================================================================

★［リスト6-1］――config/doctrine/schema.yml★
▽●●●●
Article:
  actAs:
    Timestampable: {}
  columns:
    title:
      type: string(255)
      notnull: true
    body:
      type: string(3000)
      notnull: true
    published_at:
      type: timestamp
△●●●●


★［リスト6-2］――BaseArticleクラス★
▽●●●●
<?php

/**
 * BaseArticle
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property string $title
 * @property string $body
 * @property timestamp $published_at
 *
 * @method string    getTitle()        Returns the current record's "title" value
 * @method string    getBody()         Returns the current record's "body" value
 * @method timestamp getPublishedAt()  Returns the current record's "published_at" value
 * @method Article   setTitle()        Sets the current record's "title" value
 * @method Article   setBody()         Sets the current record's "body" value
 * @method Article   setPublishedAt()  Sets the current record's "published_at" value
 *
 * @package    prj
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseArticle extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('article');
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('body', 'string', 3000, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 3000,
             ));
        $this->hasColumn('published_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}
△●●●●


★［リスト6-3］――Articleクラス★
▽●●●●
<?php

/**
 * Article
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    prj
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Article extends BaseArticle
{
}
△●●●●


★［リスト6-4］――ArticleTableクラス★
▽●●●●
<?php

/**
 * ArticleTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ArticleTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ArticleTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Article');
    }
}
△●●●●


★［リスト6-5］ーーArticleオブジェクトの操作例★
▽●●●●
// Articleオブジェクトを作成
$article = new Article();

// 値を設定
$article->setTitle('タイトル');

// 値を取得
$publishedAt = $article->getPublishedAt();
△●●●●


★［リスト6-6］ーーArticleTableオブジェクトの操作例★
▽●●●●
// ArticleTableオブジェクトを取得
$table = ArticleTable::getInstance();
// 下記も同じ
// $table = Doctrine_Core::getTable('Article');

// idが1のArticleオブジェクトを取得
$article = $table->find(1);
△●●●●


★［リスト6-7］ーーレコードクラスを使った保存の例★
▽●●●●
$article = new Article();

$article->setTitle('タイトル');
$article->setBody('本文');
$article->setPublishedAt(date('Y-m-d H:i:s'));

// save()メソッドを呼び出して保存
$article->save();
△●●●●


★［リスト6-8］ーーレコードクラスを使った更新の例★
▽●●●●
$article = ArticleTable::getInstance()->find(1);

$article->setPublishedAt(null);

$article->save();
△●●●●


★［リスト6-9］ーーレコードクラスを使った削除の例★
▽●●●●
$article = ArticleTable::getInstance()->find(1);

$article->delete();
△●●●●


★［リスト6-10］ーーfindAll()メソッドの使用例★
▽●●●●
$articles = ArticleTable::getInstance()->findAll();

if (count($articles) > 0)
{
    foreach ($articles as $article)
    {
        echo $article->getTitle(), PHP_EOL;
    }
}
△●●●●


★［リスト6-11］ーーfindBy()メソッドの使用例★
▽●●●●
$articles = ArticleTable::getInstance()->findBy('published_at', '2011-01-01 12:34:56');
△●●●●


★［リスト6-12］ーーfindOneBy()メソッドの使用例★
▽●●●●
$article = ArticleTable::getInstance()->findOneBy('title', 'symfony');
△●●●●


★［リスト6-13］ーーマジックファインダーの使用例★
▽●●●●
$article = ArticleTable::getInstance()->findOneByTitle('symfony');
△●●●●


★［リスト6-14］ーーマジックファインダーによる複数カラムの条件指定の例★
▽●●●●
$articles = ArticleTable::getInstance()->findByTitleOrPublishedAt('symfony', '2011-01-01 12:34:56');
△●●●●


★［リスト6-15］ーーDoctrine_Queryでクエリーを組み立てる例★
▽●●●●
$q = Doctrine_Query::create()
  ->from('Article a')
  ->where('a.title LIKE ?', '%symfony%')
  ->andWhere('a.published_at IS NOT NULL')
  ->orderBy('a.published_at DESC')
  ->limit(10);

$articles = $q->execute();

/* 以下のようなSQLが実行される
  SELECT a.*
  FROM article a
  WHERE a.title LIKE '%symfony%'
    AND a.published_at IS NOT NULL
  ORDER BY a.published_at DESC
  LIMIT 10
 */
△●●●●


★［リスト6-16］ーーテーブルクラスから基本となるクエリーオブジェクトを取得する例★
▽●●●●
$q = ArticleTable::getInstance()->createQuery('a');
△●●●●


★［リスト6-17］ーークエリーのFROMを指定する例★
▽●●●●
$q = Doctrine_Query::create()
  ->from('Article a');
△●●●●


★［リスト6-18］ーークエリーのSELECTを指定する例★
▽●●●●
$q = Doctrine_Query::create()
  ->select('a.title, a.body, a.published_at, DATE(a.published_at) published_date')
  ->from('Article a');
△●●●●


★［リスト6-19］ーークエリーのWHEREを指定する例★
▽●●●●
$q = Doctrine_Query::create()
  ->from('Article a')
  ->where('(a.title LIKE ? OR a.body LIKE ?)', array('%symfony%', '%symfony%'))
  ->andWhere('a.published_at IS NOT NULL');
△●●●●


★［リスト6-20］ーークエリーでINを使う例★
▽●●●●
$q = Doctrine_Query::create()
  ->from('Article a')
  ->whereIn('a.id', array(1, 3, 5));
△●●●●


★［リスト6-21］ーー複数のORDER BYを指定する例★
▽●●●●
$q = Doctrine_Query::create()
  ->from('Article a')
  ->orderBy('a.published_at DESC')
  ->addOrderBy('a.id');
△●●●●


★［リスト6-22］ーーORDER BY RAND()を使ってランダムにソートする例★
▽●●●●
$q = Doctrine_Query::create()
  ->from('Article a')
  ->orderBy('rand()');
△●●●●


★［リスト6-23］――LIMIT、OFFSETの使用例★
▽●●●●
$q = Doctrine_Query::create()
  ->from('Article a')
  ->limit(1)
  ->offset(10);
△●●●●


★［リスト6-24］ーーDoctrine_Queryでクエリーを実行★
▽●●●●
$q = Doctrine_Query::create()
  ->from('Article a')
  ->where('a.title = ?', 'symfony')
  ->andWhere('a.published_at IS NOT NULL')
  ->limit(1);

$article = $q->fetchOne();
echo $article->getId();
△●●●●


★［リスト6-25］ーーCOUNTの取得★
▽●●●●
$q = Doctrine_Query::create()
  ->from('Article a')
  ->andWhere('a.published_at IS NOT NULL');

$count = $q->count();
△●●●●


★［リスト6-26］ーーArticleTableクラスにレコード取得用のメソッドを定義★
▽●●●●
class ArticleTable extends Doctrine_Table
{
  public function findAllPublishedArticles()
  {
    return $this->createQuery('a')
      ->where('a.published_at IS NOT NULL')
      ->execute();
  }

  public function findPublishedArticleById($id)
  {
    return $this->createQuery('a')
      ->where('a.published_at IS NOT NULL')
      ->andWhere('a.id = ?', $id)
      ->fetchOne();
  }
}
△●●●●


★［リスト6-27］ーー特定の条件のクエリーパーツを生成するメソッドを定義した例★
▽●●●●
class ArticleTable extends Doctrine_Table
{
  public function findAllPublishedArticles()
  {
    return $this->addPublishedArticleQuery($this->createQuery('a'))
      ->execute();
  }

  public function findPublishedArticleById($id)
  {
    return $this->addPublishedArticleQuery($this->createQuery('a'))
      ->andWhere('a.published_at IS NOT NULL')
      ->fetchOne();
  }

  public function addPublishedArticleQuery(Doctrine_Query $query, $alias = null, $targetDate = null)
  {
    if (null === $alias)
    {
      $alias = $query->getRootAlias();
    }

    if (null === $targetDate)
    {
      $targetDate = new DateTime();
    }

    return $query
        ->andWhere($alias.'.published_at IS NOT NULL AND '.$alias.'.published_at <= ?', $targetDate->format('Y-m-d H:i:s'))
    ;
  }
}
△●●●●


★［リスト6-28］ーーUPDATEクエリーの例★
▽●●●●
Doctrine_Query::create()
  ->update('Article')
  ->set('title', "REPLACE(title, 'symphony', 'symfony')")
  ->where('title LIKE ?', '%symphony%')
  ->execute();
△●●●●


★［リスト6-29］ーーset()メソッドでプレースホルダを使う例★
▽●●●●
Doctrine_Query::create()
  ->update('Article')
  ->set('title', '?', 'Untitled')
  ->where("title = ''")
  ->execute();
△●●●●


★［リスト6-30］ーーDELETEクエリーの例★
▽●●●●
Doctrine_Query::create()
  ->delete()
  ->from('Article a')
  ->where('a.published_at < ?', '2000-01-01 00:00:00')
  ->execute();
△●●●●


★［リスト6-31］――接続オブジェクトを取得する★
▽●●●●
  // モデルで使っている接続オブジェクトを取得する
  $connection = ArticleTable::getInstance()->getConnection();

  // グローバルに使っている接続オブジェクトを取得する
  $connection = Doctrine_Manager::connection();
△●●●●


★［リスト6-32］――接続オブジェクトのinsert()メソッドの使用例★
▽●●●●
  $table = ArticleTable::getInstance();
  $conn  = $table->getConnection();
  $conn->insert($table, array(
    'title' => '記事のタイトル',
    'body'  => '本文'
  ));
△●●●●


★［リスト6-33］――slugカラムを単純に定義★
▽●●●●
Article:
  columns:
    slug:     string(255)
    :
△●●●●


★［リスト6-34］――Sluggableビヘイビアを適用★
▽●●●●
Article:
  behaviors:
    Sluggable: ~
  columns:
    :
△●●●●


★［リスト6-35］――preSave()フックの利用例★
▽●●●●
class Article extends BaseArticle
{
  public function preSave($event)
  {
    $summary = $this->summarize($this->getContent());
    $this->setSummary($summary);
  }
}
△●●●●


★［リスト6-36］――ProjectConfigurationにconfigureDoctrine()メソッドを追加★
▽●●●●
class ProjectConfiguration...
{
  :
  public function configureDoctrine(Doctrine_Manager $manager)
  {
    $manager->setAttribute(Doctrine_Core::ATTR_USE_DQL_CALLBACKS, true);
  }
}
△●●●●


★［リスト6-37］――一対一のリレーションを定義するschema.yml★
▽●●●●
Article:
  columns:
    title:           string(100)
    body:            string(3000)
ArticleDetail:
  columns:
    article_id:      integer
    article_option:  string(1000)
  relations:
    Article:
      local:         article_id
      type:          one
      foreign:       id
      foreignType:   one
△●●●●


★［リスト6-38］――生成されたSQL★
▽●●●●
CREATE TABLE article (id BIGINT AUTO_INCREMENT, title VARCHAR(100), body TEXT, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE article_detail (id BIGINT AUTO_INCREMENT, article_id BIGINT, article_option TEXT, INDEX article_id_idx (article_id), PRIMARY KEY(id)) ENGINE = INNODB;
ALTER TABLE article_detail ADD CONSTRAINT article_detail_article_id_article_id FOREIGN KEY (article_id) REFERENCES article(id);
△●●●●


★［リスト6-39］――BaseArticleクラスに追加されたメソッド用のコメント★
▽●●●●
  :
 * @method ArticleDetail getArticleDetail() Returns the current record's "ArticleDetail" value
  :
 * @method Article       setArticleDetail() Sets the current record's "ArticleDetail" value
△●●●●


★［リスト6-40］――BaseArticleDetailクラスに追加されたメソッド用のコメント★
▽●●●●
  :
 * @method Article       getArticle()        Returns the current record's "Article" value
  :
 * @method ArticleDetail setArticle()        Sets the current record's "Article" value
△●●●●


★［リスト6-41］――リレーション先のオブジェクトの取得と保存★
▽●●●●
  // Articleを取得し、その後関連付けられているArticleDetailを取得
  $article = ArticleTable::getInstance()->find(1);
  $articleDetail = $article->getArticleDetail();

  // Articleに新しいArticleDetailを関連付ける
  $newArticleDetail = new ArticleDetail();
  // :
  $article->setArticleDetail($newArticleDetail);
  $article->save();  // (1)
△●●●●


★［リスト6-42］――一対多のリレーションを定義するschema.yml★
▽●●●●
Article:
  columns:
    title:           string(100)
    body:            string(3000)
Comment:
  columns:
    article_id:      integer
    body:            string(1000)
  relations:
    Article:
      local:         article_id
      type:          one
      foreign:       id
      foreignType:   many
△●●●●


★［リスト6-43］――BaseArticleクラスに追加されたメソッド用のコメント★
▽●●●●
 :
 * @method Doctrine_Collection getComment() Returns the current record's "Comment" collection
 :
 * @method Article             setComment() Sets the current record's "Comment" collection
△●●●●


★［リスト6-44］――リレーション先から見たエイリアスを設定★
▽●●●●
  relations:
    Article:
      local:         article_id
      type:          one
      foreign:       id
      foreignType:   many
      foreignAlias:  Comments
△●●●●


★［リスト6-45］――複数形になったメソッド名★
▽●●●●
 :
 * @method Doctrine_Collection getComments() Returns the current record's "Comments" collection
 :
 * @method Article             setComments() Sets the current record's "Comments" collection
△●●●●


★［リスト6-46］――多対多のリレーションを定義するschema.yml★
▽●●●●
Article:
  columns:
    title:           string(100)
    body:            string(3000)
  relations:
    Tag:
      class:         Tag
      refClass:      ArticleTag
      alias:         Tags
Tag:
  columns:
    body:            string(1000)

ArticleTag:
  columns:
    article_id:
      type:          integer
      primary:       true
    tag_id:
      type:          integer
      primary:       true
△●●●●


★［リスト6-47］――file name or caption★
▽●●●●
Tag:
  tag_pg:
    body:      プログラミング関連
  tag_symfony:
    body:      symfony関連

Article:
  a1:
    title:     symfonyでDoctrineを使う方法（１）
    body:      本文テスト
    Tags:      [ tag_pg, tag_symfony ]

  a2:
    title:     プロフェッショナルなプログラマーについて
    body:      本文テスト２
    Tags:      [ tag_pg ]
△●●●●


★［リスト6-48］――多対多のリレーション先を取得するメソッド用のコメント★
▽●●●●
 :
 * @method Doctrine_Collection getTags()  Returns the current record's "Tags" collection
 :
 * @method Article             setTags()  Sets the current record's "Tags" collection
△●●●●


★［リスト6-49］――多対多のリレーション先のオブジェクトを取得する★
▽●●●●
    $article = ArticleTable::getInstance()->findOneByTitle('symfonyでDoctrineを使う方法（１）');

    $tags = $article->getTags();

    echo count($tags);
    foreach ($tags as $tag)
    {
        echo $tag->getBody();
    }

    $tag1 = new Tag();         // (1)
    $tag1->setBody('new tag');

    $tags->add($tag1);
    $article->setTags($tags);
    $article->save();
△●●●●


★［リスト6-50］――APCキャッシュドライバ★
▽●●●●
  $driver = new Doctrine_Cache_Apc();
△●●●●


★［リスト6-51］――file name or caption★
▽●●●●
  public function configureDoctrine($manager)
  {
    $manager->setAttribute(Doctrine_Core::ATTR_RESULT_CACHE, new Doctrine_Cache_Apc());
  }
△●●●●


★［リスト6-52］――file name or caption★
▽●●●●
  $result = ArticleTable::getInstance()->createQuery('a')
    ->where('a.title like', '%symfony%')
    ->useResultCache(true, 3600);  // 1時間キャッシュ
△●●●●


